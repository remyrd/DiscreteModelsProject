{"changed":true,"filter":false,"title":"ProcessAssignment.py","tooltip":"/ProcessAssignment.py","value":"# coding: utf-8\n\n# This is some demo Python code for reading in a problem instance and\n# initial assignment for the first programming assignment of T-79.4101\n# Discrete Models and Search, written for Python 2.7.3\n#\n# Note: the main method here just reads in a problem instance file and the\n# initial assignment, and then prints both of them to the specified output\n# file.\n\nfrom __future__ import print_function\nimport sys\n#from numpy import append\n\n# Just some useful exceptions to raise during parsing\nclass InstanceError(BaseException):\n\tpass\n\nclass AssignmentError(BaseException):\n\tpass\n\nclass InvalidArgumentException(ValueError):\n\tpass\n\nclass ProcessAssignment:\n\t\"\"\"Stores an instance of the process assignment program.\"\"\"\n\tnum_resources = 0\n\tnum_machines = 0\n\tnum_processes = 0\n\tnum_services = 0\n\tnum_locations = 0\n\n\t# The capacities and the requirements will be presented as lists of\n\t# tuples. Suppose there are three resources, and two machines. Then\n\t# the contents of machine_capacities could be [(2, 11, 4), (9, 33, 1)].\n\tmachine_capacities = []\n\tsoft_machine_capacities = []\n\tprocess_requirements = []\n\n\t# The following are just lists of integers\n\tmachine_locations = []\n\tservice_min_spreads = []\n\tprocess_services = []\n\tprocess_moving_costs = []\n\n\t# This is a list of machines, one for each process\n\tassignment = None\n\n\tdef __init__(self, filename=None):\n\t\tif filename:\n\t\t\tself._read_instance_file(filename)\n\n\tdef dump_instance(self, filename=None, mode='w'):\n\t\t\"\"\"Writes the current instance in human-readable format to \n                a given file or stdout.\"\"\"\n\n\t\tif filename:\n\t\t\tif mode not in ['a', 'w']:\n\t\t\t\traise InvalidArgumentException(\"Allowed modes are 'a' and 'w'\")\n\t\t\tf = open(filename, mode)\n\t\telse:\n\t\t\tf = sys.stdout\n\n\t\tprint(\"Problem instance:\\n\", file=f)\n\t\tprint(\"  Resources: %4d\" % self.num_resources, file=f)\n\t\tprint(\"  Machines: %5d\" % self.num_machines, file=f)\n\t\tprint(\"  Processes: %4d\" % self.num_processes, file=f)\n\t\tprint(\"  Services: %5d\" % self.num_services, file=f)\n\t\tprint(\"  Locations: %4d\" % self.num_locations, file=f)\n\n\t\tprint(\"\\n  Machine Capacities (soft/hard):\\n\", file=f)\n\n\t\tfor machine in xrange(self.num_machines):\n\t\t\tprint(\"    m: %d\" % machine, file=f)\n\t\t\tcapacities = [('%d/%d' % t).rjust(10) for t in zip(self.machine_capacities[machine], self.soft_machine_capacities[machine])]\n\t\t\tprint(\"      %s\" % \"\".join(capacities), file=f)\n\n\t\tprint(\"\\n  Machine Locations:\\n\", file=f)\n\n\t\tfor machine in xrange(self.num_machines):\n\t\t\tprint(\"    m: %d\" % machine, file=f)\n\t\t\tprint(\"        %4d\" % self.machine_locations[machine], file=f)\n\n\t\tprint(\"\\n  Minimum Service Spreads:\\n\", file=f)\n\n\t\tfor service in xrange(self.num_services):\n\t\t\tprint(\"    s: %d\" % service, file=f)\n\t\t\tprint(\"        %4d\" % self.service_min_spreads[service], file=f)\n\n\t\tprint(\"\\n  Process Requirements:\\n\", file=f)\n\n\t\tfor process in xrange(self.num_processes):\n\t\t\tprint(\"    p: %d\" % process, file=f)\n\t\t\trequirements = [('%d' % req).rjust(6) for req in self.process_requirements[process]]\n\t\t\tprint(\"      %s\" % \"\".join(requirements), file=f)\n\n\t\tprint(\"\\n  Process Services:\\n\", file=f)\n\n\t\tfor process in xrange(self.num_processes):\n\t\t\tprint(\"    p: %d\" % process, file=f)\n\t\t\tprint(\"        %4d\" % self.process_services[process], file=f)\n\n\t\tprint(\"\\n  Process Moving Costs:\\n\", file=f)\n\n\t\tfor process in xrange(self.num_processes):\n\t\t\tprint(\"    p: %d\" % process, file=f)\n\t\t\tprint(\"        %4d\" % self.process_moving_costs[process], file=f)\n\n\t\tprint(\"\", file=f)\n\n\t\tif f is not sys.stdout:\n\t\t\tf.close()\n\n\tdef _read_instance_file(self, filename):\n\t\t\"\"\"Parses an instance file and overwrites any saved values \n                with new data. Note that only very crude error checking is \n                performed here (concerning the values and the formatting of \n                the file). Most things will raise an exception, e.g. if the\n\t\tvalues in the file are not integer, or are outside the \n                allowed range.\"\"\"\n\t\twith open(filename) as instancefile:\n\t\t\t# The first line contains the number of resources\n\t\t\tself.num_resources = int(instancefile.readline().strip())\n\t\t\t# The second line contains the number of machines\n\t\t\tself.num_machines = int(instancefile.readline().strip())\n\n\t\t\tif (self.num_resources < 1 or self.num_resources > 10):\n\t\t\t\traise InstanceError(\"The number of resources is not within limits\")\n\n\t\t\tif (self.num_machines < 1 or self.num_machines > 500):\n\t\t\t\traise InstanceError(\"The number of machines is not within limits\")\n\n\t\t\t# Initialize some lists (delete any previous data \n                        # that may have been there)\n\t\t\tself.machine_capacities = [0] * self.num_machines\n\t\t\tself.soft_machine_capacities = [0] * self.num_machines\n\t\t\tself.machine_locations = [0] * self.num_machines\n\n\t\t\t# debug\n\t\t\tprint(\"LOG: read num_resources and num_machines\")\n\n\t\t\t# Next num_machines lines contain the following things:\n\t\t\t# <location> <capacity for resource \n                        # i=1...num_resources> <soft capacity for resource \n                        # i=1...num_resources>\n\t\t\tfor machine in xrange(self.num_machines):\n\t\t\t\t# Split the line at each space character to \n                                # form a list of values\n\t\t\t\ttokens = instancefile.readline().strip().split()\n\n\t\t\t\tif len(tokens) != (1 + 2 * self.num_resources):\n\t\t\t\t\traise InstanceError(\"Wrong number of values (expected %d, found %d)\" % (1 + 2 * self.num_resources, len(tokens)))\n\n\t\t\t\t# First, read the machine location\n\t\t\t\tlocation = int(tokens[0])\n\n\t\t\t\tif (location < 0 or location > self.num_machines):\n\t\t\t\t\traise InstanceError(\"Invalid machine location: %d\" % location)\n\n\t\t\t\t# Here, we're just updating the number of \n                                # locations as we observe more of them. \n                                # The assumption is of course that all \n                                # locations from 1 to n are in use, otherwise \n                                #the number wouldn't technically be accurate.\n\t\t\t\tif self.num_locations < location + 1:\n\t\t\t\t\tself.num_locations = location + 1\n\n\t\t\t\tself.machine_locations[machine] = location\n\n\t\t\t\t# Then the (hard) capacities\n\t\t\t\tself.machine_capacities[machine] = tuple([int(t) for t in tokens[1:self.num_resources+1]])\n\t\t\t\t# ...and the soft capacities\n\t\t\t\tself.soft_machine_capacities[machine] = tuple([int(t) for t in tokens[self.num_resources+1:]])\n\n\t\t\t\t# debug\n\t\t\tprint(\"LOG: read machine locations and capacities\")\n\n\t\t\t# The next line has the number of services\n\t\t\tself.num_services = int(instancefile.readline().strip())\n\n\t\t\tif (self.num_services < 1 or self.num_services > 2000):\n\t\t\t\traise InstanceError(\"The number of services is not within limits\")\n\n\t\t\tself.service_min_spreads = [0] * self.num_services\n\n\t\t\t# The next num_services lines contain the minimum \n                        # spreads for each service\n\t\t\tfor service in xrange(self.num_services):\n\t\t\t\tmin_spread = int(instancefile.readline().strip())\n\n\t\t\t\tif (min_spread < 0 or min_spread > self.num_locations):\n\t\t\t\t\traise InstanceError(\"Invalid service spread value: %d\" % min_spread)\n\t\t\t\t\n\t\t\t\tself.service_min_spreads[service] = min_spread\n\n\t\t\t# debug\n\t\t\tprint(\"LOG: read service spreads\")\n\n\t\t\t# The next line has the number of processes\n\t\t\tself.num_processes = int(instancefile.readline().strip())\n\n\t\t\tif (self.num_processes < 1 or self.num_processes > 2000):\n\t\t\t\traise InstanceError(\"The number of processes is not within limits\")\n\n\t\t\tself.process_services = [0] * self.num_processes\n\t\t\tself.process_requirements = [0] * self.num_processes\n\t\t\tself.process_moving_costs = [0] * self.num_processes\n\n\t\t\t# The next num_processes lines contain the \n                        # requirements for each process\n\t\t\tfor process in xrange(self.num_processes):\n\t\t\t\t# Split the line at each space character to \n                                # form a list of values\n\t\t\t\ttokens = instancefile.readline().strip().split()\n\n\t\t\t\tif len(tokens) != (2 + self.num_resources):\n\t\t\t\t\traise InstanceError(\"Wrong number of values (expected %d, found %d)\" % (2 + self.num_resources, len(tokens)))\n\n\t\t\t\t# First, read the service this process \n                                # belongs to\n\t\t\t\tservice = int(tokens[0])\n\n\t\t\t\tif (service < 0 or service > self.num_services):\n\t\t\t\t\traise InstanceError(\"Invalid service value for process: %d\" % service)\n\n\t\t\t\tself.process_services[process] = service\n\n\t\t\t\t# Then, read the requirements this process \n                                # has for each resource\n\t\t\t\tself.process_requirements[process] = tuple([int(t) for t in tokens[1:self.num_resources+1]])\n\n\t\t\t\t# The last value is the moving cost of the \n                                # process\n\t\t\t\tmoving_cost = int(tokens[self.num_resources + 1])\n\n\t\t\t\tif (moving_cost < 0 or moving_cost > 1000):\n\t\t\t\t\traise InstanceError(\"The moving cost is not within limits\")\n\n\t\t\t\tself.process_moving_costs[process] = moving_cost\n\n\t\t\t# debug\n\t\t\tprint(\"LOG: read processes\")\n\t\t\tprint(\"LOG: finished reading instance\")\n\n\tdef update_assignment(self, filename):\n\t\t\"\"\"Reads an assignment from a file, overwrites a previous assignment if one existed.\"\"\"\n\t\twith open(filename) as assignmentfile:\n\t\t\ttokens = assignmentfile.readline().strip().split()\n\n\t\t\tif len(tokens) != self.num_processes:\n\t\t\t\traise AssignmentError(\"Wrong number of assigned processes (expected %d, found %d)\" % (self.num_processes, len(tokens)))\n\n\t\t\tself.assignment = [0] * self.num_processes\n\n\t\t\t# Parse the machine the process is assigned to\n\t\t\tfor process in xrange(self.num_processes):\n\t\t\t\tself.assignment[process] = int(tokens[process])\n\t\t# debug\n\t\tprint(\"LOG: finished reading assignment\")\n\t\t\n#======================================================================\n# TODO \n#======================================================================\t\n\t\ndef shared_processes(proc_assignment,target_element,target_list):\n\t\"\"\"Search for processe with a common element\"\"\"\n\tshared_processes = []\n\tfor process in xrange(proc_assignment.num_processes):\n\t\tif target_list[process] == target_element:\n\t\t\tshared_processes.append(process)\n\n\treturn shared_processes\n\ndef verify_service_spread(proc_assignment, process, machine):\n\t\"\"\"Verify if the minimum service spread is still OK when moving a process to a new machine\"\"\"\n\tshared_proc_service = shared_processes(proc_assignment, process, proc_assignment.process_services) # processes with the same service\n\tshared_proc_service.remove(process) # don't want to include process being evaluated since it moves\n\tlocation_list = [proc_assignment.machine_locations[machine]] # add the location of the instanced machine at the beginning\n\tprint(\"process \",process,\" belongs to service \",proc_assignment.process_services[process])\n\tprint(\"service min spread \",proc_assignment.service_min_spreads[proc_assignment.process_services[process]])\n\tfor i in xrange(shared_proc_service.__len__()):\n\t\tif proc_assignment.machine_locations[proc_assignment.assignment[i]] not in location_list:# if we find a new location, add it to the list\n\t\t\tlocation_list.append(proc_assignment.machine_locations[proc_assignment.assignment[i]])\n\t\tprint(\"locations list \",location_list)\n\treturn (location_list.__len__() <= proc_assignment.service_min_spreads[proc_assignment.process_services[process]])\n\t\ndef try_constraints(proc_assignment, process, machine):\n\t\"\"\"Try constraints for allowing a process into a machine\"\"\"\n\t# MCCon\n\tmccon = True\n\tmachine_capacity = proc_assignment.machine_capacities[machine]\n\tlocal_process_cost = [0] * machine_capacity.__len__() #sum of the processes in a machine\n\tshared_proc_machine = shared_processes(proc_assignment, machine,proc_assignment.assignment)\n\tif process not in shared_proc_machine:\n\t\tshared_proc_machine.append(process) #include the process to be moved\n\tfor i in xrange(shared_proc_machine.__len__()):\n\t\tfor j in xrange(machine_capacity.__len__()):\n\t\t\tlocal_process_cost[j] += proc_assignment.process_requirements[i][j] #process i, resource j\n\tfor j in xrange(machine_capacity.__len__()):\n\t\tif local_process_cost[j] > machine_capacity[j]:\n\t\t\tmccon = False\n\t\t\t#print (\"MCCon unsatisfied for \", process,\" in machine \",machine)\n\t\t\treturn False\n\t\n\t# SCCon\n\tsccon = True\n\tshared_proc_machine = shared_processes(proc_assignment, machine,proc_assignment.assignment)\n\tfor i in xrange(shared_proc_machine.__len__()):\n\t\tif proc_assignment.process_services[process] == proc_assignment.process_services[shared_proc_machine[i]]:\n\t\t\tsccon = False\n\t\t\t#print (\"SCCon unsatisfied for \",process,\" in machine \",machine)\n\t\t\treturn False \n\t# SSCon\t\n\tsscon = True\n\tif proc_assignment.service_min_spreads[proc_assignment.process_services[process]]>1 : # is it necessary?\n\t\tsscon = verify_service_spread(proc_assignment, process, machine)\n\t\tif sscon == False :\n\t\t\t#print (\"SSCon unsatisfied for \",process,\" in machine \",machine)\n\t\t\treturn False\n\t\n\treturn (mccon & sccon & sscon)\t\n\ndef calculate_costs(proc_assignment, process, machine):\n\t\"\"\"Calculates the cost difference for moving a process to a new machine.\n\tPositive -> bad, new configuration costs more\n\tNegative -> good, new configuration costs less\"\"\"\n\n\tmoving_cost = proc_assignment.process_moving_costs[process]\n\ttotal_cost = moving_cost\n\t\n\tmachineload_cost_old = [0] * proc_assignment.machine_capacities[0].__len__()\n\tmachineload_cost_new = [0] * proc_assignment.machine_capacities[0].__len__()\n\tprocess_cost = proc_assignment.process_requirements[process]\n\tshared_proc_machine_old = shared_processes(proc_assignment, assignment[process],assignment) #processes in the old machine\n\tshared_proc_machine_new = shared_processes(proc_assignment, machine, assignment) #processes in the new machine\n\t\n\t#costs in new and old machine before moving process\n\tfor i in xrange(shared_proc_machine_old.__len__()):\n\t\tfor j in xrange(proc_assignment.machine_capacities[0].__len__()):\n\t\t\tmachineload_cost_old[j] += proc_assignment.process_requirements[i][j]\n\t\n\tfor i in xrange(shared_proc_machine_new.__len__()):\n\t\tfor j in xrange(proc_assignment.machine_capacities[0].__len__()):\n\t\t\tmachineload_cost_new[j] += proc_assignment.process_requirements[i][j]\n\n\t#check if soft capacities lower limit is reached\n\tfor j in xrange(proc_assignment.machine_capacities[0].__len__()):\n\t\tif (machineload_cost_old[j]-process_cost[j])>proc_assignment.soft_machine_capacities[assignment[process]][j]: #assigment[process] = old machine\n\t\t\t#don't remove too much cost, only until soft capacities limit\n\t\t\ttotal_cost -= machineload_cost_old[j] - proc_assignment.soft_machine_capacities[assignment[process]][j]\n\t\telse:\n\t\t\t#soft capacities not reached, remove whole cost\n\t\t\ttotal_cost -= process_cost[j]\n\t\n\t#check if soft capacities upper limit is reached\n\tfor j in xrange(proc_assignment.machine_capacities[0].__len__()):\n\t\tif machineload_cost_new[j] > proc_assignment.soft_machine_capacities[machine][j]:\n\t\t\ttotal_cost += process_cost[j]\n\t\telse:\n\t\t\ttotal_cost += machineload_cost_new[j] + process_cost[j] - proc_assignment.soft_machine_capacities[machine][j]\n\t\n\treturn total_cost\n\t\t\t\t\n\t\ndef probe_neighbor(proc_assignment, min_move_cost_proc=None):\n\t\"\"\"see what is the least moving cost, then swap processes machines if possible\"\"\"\n\t #process with least moving cost specified? if not, find one\n\tif not min_move_cost_proc:\n\t\tmin_move_cost_proc = proc_assignment.process_moving_costs.index(min(proc_assignment.process_moving_costs))\n\t\n\t#find candidate machines CONSTRAINTS apply and calculate COSTS\n\tcandidate_machines = []\n\tcosts = []\n\tfor machine in xrange(proc_assignment.num_machines):\n\t\tif try_constraints(proc_assignment, min_move_cost_proc,machine):\n\t\t\tcandidate_machines.append(machine)\n\t\t\tcosts.append(calculate_costs(proc_assignment, min_move_cost_proc,machine))\n\tprint(\"we found \",candidate_machines.__len__(),\" candidates! process \",min_move_cost_proc,\" can go to machines \",candidate_machines)\n\tprint(\"the costs are \",costs)\t\n\t\n\t# candidate_machines --> [1, 3, 5, 9]\n\t# costs --> [-25, 58, -220, 98]\n\t# return only negative \n\t\n\t\t\t\t\n#=======================================================================\n\ndef dump_assignment(assignment, filename=None, mode='w'):\n\t\"\"\"Writes an assignment in human-readable format to a given file or \n        stdout.\"\"\"\n\n\tif filename:\n\t\tif mode not in ['a', 'w']:\n\t\t\traise InvalidArgumentException(\"Allowed modes are 'a' and 'w'\")\n\t\tf = open(filename, mode)\n\telse:\n\t\tf = sys.stdout\n\n\tprint(\"Assignment (process -> machine):\\n\", file=f)\n\n\tfor process in xrange(len(assignment)):\n\t\tprint(\"  %4d -> %d\" % (process, assignment[process]), file=f)\n\n\tprint(\"\", file=f)\n\tif f is not sys.stdout:\n\t\tf.close()\n\n\nif __name__ == \"__main__\":\n\tif len(sys.argv) not in [3, 4]:\n\t\tprint(\"Usage: python processassignment.py <instance_file> <initial_solution_file> [<output_file>]\")\n\telse:\n\t\t# Read the instance and the assignment and initialise a new \n                # ProcessAssignment object\n\t\ttry:\n\t\t\tassignment = ProcessAssignment(filename=sys.argv[1])\n\t\texcept BaseException, e:\n\t\t\tprint(\"Could not initialize a ProcessAssignment.\", file=sys.stderr)\n\t\t\tprint(repr(e), file=sys.stderr)\n\t\t\tsys.exit(1)\n\n\t\ttry:\n\t\t\tassignment.update_assignment(filename=sys.argv[2])\n\t\texcept BaseException, e:\n\t\t\tprint(\"Could not load the initial assignment.\", file=sys.stderr)\n\t\t\tprint(repr(e), file=sys.stderr)\n\t\t\tsys.exit(1)\n\t\tprobe_neighbor(assignment)\n\t\t# Print a representation of the instance and the assignment \n        # to the given <output_file>\n\t\tif len(sys.argv) == 3:\n\t\t\t# Print to stdout\n\t\t\toutfile = None\n\t\telse:\n\t\t\toutfile = sys.argv[3]\n\t\tassignment.dump_instance(filename=outfile)\n\t\tdump_assignment(assignment.assignment, filename=outfile, mode='a')\n\n","undoManager":{"mark":-225,"position":100,"stack":[[{"group":"doc","deltas":[{"start":{"row":369,"column":4},"end":{"row":369,"column":5},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":369,"column":5},"end":{"row":369,"column":6},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":369,"column":6},"end":{"row":369,"column":7},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":369,"column":7},"end":{"row":369,"column":8},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":369,"column":8},"end":{"row":369,"column":9},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":369,"column":9},"end":{"row":369,"column":10},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":369,"column":10},"end":{"row":369,"column":11},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":369,"column":8},"end":{"row":369,"column":11},"action":"remove","lines":["min"]},{"start":{"row":369,"column":8},"end":{"row":369,"column":26},"action":"insert","lines":["min_move_cost_proc"]}]}],[{"group":"doc","deltas":[{"start":{"row":370,"column":1},"end":{"row":370,"column":2},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":369,"column":26},"end":{"row":369,"column":27},"action":"insert","lines":[":"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":33},"end":{"row":368,"column":34},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":34},"end":{"row":368,"column":35},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":35},"end":{"row":368,"column":36},"action":"insert","lines":["p"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":36},"end":{"row":368,"column":37},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":37},"end":{"row":368,"column":38},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":38},"end":{"row":368,"column":39},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":38},"end":{"row":368,"column":39},"action":"remove","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":37},"end":{"row":368,"column":38},"action":"remove","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":37},"end":{"row":368,"column":38},"action":"insert","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":38},"end":{"row":368,"column":39},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":39},"end":{"row":368,"column":40},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":40},"end":{"row":368,"column":41},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":41},"end":{"row":368,"column":42},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":42},"end":{"row":368,"column":43},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":43},"end":{"row":368,"column":44},"action":"insert","lines":["?"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":44},"end":{"row":368,"column":45},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":45},"end":{"row":368,"column":46},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":46},"end":{"row":368,"column":47},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":47},"end":{"row":368,"column":48},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":48},"end":{"row":368,"column":49},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":49},"end":{"row":368,"column":50},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":50},"end":{"row":368,"column":51},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":51},"end":{"row":368,"column":52},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":51},"end":{"row":368,"column":52},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":51},"end":{"row":368,"column":52},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":52},"end":{"row":368,"column":53},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":53},"end":{"row":368,"column":54},"action":"insert","lines":["f"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":54},"end":{"row":368,"column":55},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":55},"end":{"row":368,"column":56},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":56},"end":{"row":368,"column":57},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":57},"end":{"row":368,"column":58},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":58},"end":{"row":368,"column":59},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":59},"end":{"row":368,"column":60},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":368,"column":60},"end":{"row":368,"column":61},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":322,"column":53},"end":{"row":322,"column":72},"action":"remove","lines":[", assignment = None"]}]}],[{"group":"doc","deltas":[{"start":{"row":326,"column":0},"end":{"row":328,"column":1},"action":"remove","lines":["\tif not assignment: #the current assignment! not the one for which costs are calculated","\t\tassignment = proc_assignment.assignment","\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":379,"column":1},"end":{"row":380,"column":0},"action":"insert","lines":["",""]},{"start":{"row":380,"column":0},"end":{"row":380,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":384,"column":0},"end":{"row":384,"column":1},"action":"insert","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":1},"end":{"row":383,"column":2},"action":"insert","lines":["#"]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":2},"end":{"row":383,"column":3},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":3},"end":{"row":383,"column":4},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":4},"end":{"row":383,"column":5},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":5},"end":{"row":383,"column":6},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":6},"end":{"row":383,"column":7},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":7},"end":{"row":383,"column":8},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":8},"end":{"row":383,"column":9},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":8},"end":{"row":383,"column":9},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":7},"end":{"row":383,"column":8},"action":"remove","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":6},"end":{"row":383,"column":7},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":5},"end":{"row":383,"column":6},"action":"remove","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":4},"end":{"row":383,"column":5},"action":"remove","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":3},"end":{"row":383,"column":4},"action":"remove","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":2},"end":{"row":383,"column":3},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":1},"end":{"row":383,"column":2},"action":"remove","lines":["#"]}]}],[{"group":"doc","deltas":[{"start":{"row":383,"column":0},"end":{"row":383,"column":1},"action":"remove","lines":["\t"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":17},"end":{"row":383,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":16},"end":{"row":382,"column":17},"action":"remove","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":15},"end":{"row":382,"column":16},"action":"remove","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":14},"end":{"row":382,"column":15},"action":"remove","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":13},"end":{"row":382,"column":14},"action":"remove","lines":["c"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":12},"end":{"row":382,"column":13},"action":"remove","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":11},"end":{"row":382,"column":12},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":10},"end":{"row":382,"column":11},"action":"remove","lines":["p"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":9},"end":{"row":382,"column":10},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":8},"end":{"row":382,"column":9},"action":"remove","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":7},"end":{"row":382,"column":8},"action":"remove","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":6},"end":{"row":382,"column":7},"action":"remove","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":5},"end":{"row":382,"column":6},"action":"remove","lines":["v"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":4},"end":{"row":382,"column":5},"action":"remove","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":3},"end":{"row":382,"column":4},"action":"remove","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":3},"end":{"row":382,"column":4},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":4},"end":{"row":382,"column":5},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":5},"end":{"row":382,"column":6},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":6},"end":{"row":382,"column":7},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":7},"end":{"row":382,"column":8},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":8},"end":{"row":382,"column":9},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":9},"end":{"row":382,"column":10},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":10},"end":{"row":382,"column":11},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":11},"end":{"row":382,"column":12},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":12},"end":{"row":382,"column":13},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":13},"end":{"row":382,"column":14},"action":"insert","lines":["y"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":14},"end":{"row":382,"column":15},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":15},"end":{"row":382,"column":16},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":16},"end":{"row":382,"column":17},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":17},"end":{"row":382,"column":18},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":18},"end":{"row":382,"column":19},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":19},"end":{"row":382,"column":20},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":20},"end":{"row":382,"column":21},"action":"insert","lines":["i"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":21},"end":{"row":382,"column":22},"action":"insert","lines":["v"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":22},"end":{"row":382,"column":23},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":382,"column":23},"end":{"row":382,"column":24},"action":"insert","lines":[" "]}]}]]},"ace":{"folds":[],"scrolltop":4925,"scrollleft":0,"selection":{"start":{"row":370,"column":0},"end":{"row":370,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":327,"state":"start","mode":"ace/mode/python"}},"timestamp":1424705284736}